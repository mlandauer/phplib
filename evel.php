<?php
/* 
 * THIS FILE WAS AUTOMATICALLY GENERATED BY ./rabxtophp.pl, DO NOT EDIT DIRECTLY
 * 
 * evel.php:
 * Generic email sending and mailing list functionality, with bounce detection
etc.
 *
 * Copyright (c) 2005 UK Citizens Online Democracy. All rights reserved.
 * WWW: http://www.mysociety.org
 *
 * $Id: evel.php,v 1.2 2005/03/30 18:12:06 francis Exp $
 *
 */

require_once('rabx.php');

/* evel_get_error R
 * Return FALSE if R indicates success, or an error string otherwise. */
function evel_get_error($e) {
    if (!rabx_is_error($e))
        return FALSE;
    else
        return $e->text;
}

/* evel_check_error R
 * If R indicates failure, displays error message and stops procesing. */
function evel_check_error($data) {
    if ($error_message = evel_get_error($data))
        err($error_message);
}

$evel_client = new RABX_Client(OPTION_EVEL_URL);


/* evel_send MESSAGE RECIPIENT ...

  MESSAGE is the full text of a message to be sent to the given RECIPIENTS. */
function evel_send($message, $recipient) {
    global $evel_client;
    $params = func_get_args();
    $result = $evel_client->call('EvEl.send', $params);
    return $result;
}

/* evel_is_address_bouncing ADDRESS

  Return true if we have received bounces for the ADDRESS. */
function evel_is_address_bouncing($address) {
    global $evel_client;
    $params = func_get_args();
    $result = $evel_client->call('EvEl.is_address_bouncing', $params);
    return $result;
}

/* evel_list_create SCOPE TAG NAME MODE [LOCALPART DOMAIN]

  Create a new mailing list for the given SCOPE (e.g. "pledgebank") and TAG
  (a unique reference for this list within SCOPE). NAME is the
  human-readable name of the list and MODE the posting-mode. Possible MODES
  are:

  * any

    anyone may post;

  * subscribers

    only subscribers may post;

  * admins

    only administrators may post; or

  * none

    nobody may post, so messages can only be submitted through the EvEl
    API.

  If MODE is anything other than "none", then LOCALPART and DOMAIN must be
  specified. These indicate the address for submissions to the list; if
  specified, LOCALPART "@" DOMAIN must form a valid mail address. */
function evel_list_create($scope, $tag, $name, $mode, $localpart = null, $domain = null) {
    global $evel_client;
    $params = func_get_args();
    $result = $evel_client->call('EvEl.list_create', $params);
    return $result;
}

/* evel_list_destroy SCOPE TAG

  Delete the list identified by the given SCOPE and TAG. */
function evel_list_destroy($scope, $tag) {
    global $evel_client;
    $params = func_get_args();
    $result = $evel_client->call('EvEl.list_destroy', $params);
    return $result;
}

/* evel_list_subscribe SCOPE TAG ADDRESS [ISADMIN]

  Subscribe ADDRESS to the list identified by SCOPE and TAG. Make the user
  an administrator if ISADMIN is true. If the ADDRESS is already on the
  list, then set their administrator status according to ISADMIN. */
function evel_list_subscribe($scope, $tag, $address, $isadmin = null) {
    global $evel_client;
    $params = func_get_args();
    $result = $evel_client->call('EvEl.list_subscribe', $params);
    return $result;
}

/* evel_list_unsubscribe SCOPE TAG ADDRESS

  Remove ADDRESS from the list identified by SCOPE and TAG. */
function evel_list_unsubscribe($scope, $tag, $address) {
    global $evel_client;
    $params = func_get_args();
    $result = $evel_client->call('EvEl.list_unsubscribe', $params);
    return $result;
}

/* evel_list_attribute */
function evel_list_attribute() {
    global $evel_client;
    $params = func_get_args();
    $result = $evel_client->call('EvEl.list_attribute', $params);
    return $result;
}

/* evel_list_send SCOPE TAG MESSAGE

  Send MESSAGE (on-the-wire message data, including all headers) to the
  list identified by SCOPE and TAG. */
function evel_list_send($scope, $tag, $message) {
    global $evel_client;
    $params = func_get_args();
    $result = $evel_client->call('EvEl.list_send', $params);
    return $result;
}

/* evel_list_members */
function evel_list_members() {
    global $evel_client;
    $params = func_get_args();
    $result = $evel_client->call('EvEl.list_members', $params);
    return $result;
}


?>
